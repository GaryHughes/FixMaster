<?xml version="1.0" encoding="UTF-8"?><!--
DISCLAIMER

THE INFORMATION CONTAINED HEREIN AND THE FINANCIAL INFORMATION EXCHANGE PROTOCOL (COLLECTIVELY, THE "FIX PROTOCOL") ARE PROVIDED "AS IS" AND NO PERSON OR ENTITY ASSOCIATED WITH THE FIX PROTOCOL MAKES ANY REPRESENTATION OR WARRANTY, EXPRESS OR IMPLIED, AS TO THE FIX PROTOCOL (OR THE RESULTS TO BE OBTAINED BY THE USE THEREOF) OR ANY OTHER MATTER AND EACH SUCH PERSON AND ENTITY SPECIFICALLY DISCLAIMS ANY WARRANTY OF ORIGINALITY, ACCURACY, COMPLETENESS, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. SUCH PERSONS AND ENTITIES DO NOT WARRANT THAT THE FIX PROTOCOL WILL CONFORM TO ANY DESCRIPTION THEREOF OR BE FREE OF ERRORS. THE ENTIRE RISK OF ANY USE OF THE FIX PROTOCOL IS ASSUMED BY THE USER.

NO PERSON OR ENTITY ASSOCIATED WITH THE FIX PROTOCOL SHALL HAVE ANY LIABILITY FOR DAMAGES OF ANY KIND ARISING IN ANY MANNER OUT OF OR IN CONNECTION WITH ANY USER'S USE OF (OR ANY INABILITY TO USE) THE FIX PROTOCOL, WHETHER DIRECT, INDIRECT, INCIDENTAL, SPECIAL OR CONSEQUENTIAL (INCLUDING, WITHOUT LIMITATION, LOSS OF DATA, LOSS OF USE, CLAIMS OF THIRD PARTIES OR LOST PROFITS OR REVENUES OR OTHER ECONOMIC LOSS), WHETHER IN TORT (INCLUDING NEGLIGENCE AND STRICT LIABILITY), CONTRACT OR OTHERWISE, WHETHER OR NOT ANY SUCH PERSON OR ENTITY HAS BEEN ADVISED OF, OR OTHERWISE MIGHT HAVE ANTICIPATED THE POSSIBILITY OF, SUCH DAMAGES.

No proprietary or ownership interest of any kind is granted with respect to the FIX Protocol (or any rights therein).

Copyright 2003-2009 FIX Protocol Limited, all rights reserved

REPRODUCTION

FIX Protocol Limited grants permission to print in hard copy form or reproduce the FIX Protocol specification in its entirety provided that the duplicated pages retain the "Copyright FIX Protocol Limited" statement at the bottom of the page.

Portions of the FIX Protocol specification may be extracted or cited in other documents (such as a document which describes one's implementation of the FIX Protocol) provided that one reference the origin of the FIX Protocol specification (HTUhttp://www.fixprotocol.orgUTH) and that the specification itself is "Copyright FIX Protocol Limited".
FIX Protocol Limited claims no intellectual property over one's implementation (programming code) of an application which implements the behavior and details from the FIX Protocol specification. 	
--><Datatypes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" copyright="Copyright (c) FIX Protocol Ltd. All Rights Reserved." edition="2010" version="FIX.5.0SP1" xsi:noNamespaceSchemaLocation="../../schema/Datatypes.xsd" generated="2010-03-13T14:54:02-05:00">
	<Datatype added="FIX.2.7" issue="SPEC-370">
		<Name>int</Name>
		<Description>Sequence of digits without commas or decimals and optional sign character (ASCII characters "-" and "0" - "9" ). The sign character utilizes one byte (i.e. positive int is "99999" while negative int is "-99999"). Note that int values may contain leading zeros (e.g. "00023" = "23").
Examples:
723 in field 21 would be mapped int as |21=723|.
-723 in field 12 would be mapped int as |12=-723|
The following data types are based on int.
</Description>
		<XML>
			<BuiltIn>1</BuiltIn>
			<Base>xs:integer</Base>
			<Description>Sequence of digits without commas or decimals and optional sign character (ASCII characters "-" and "0" - "9" ). The sign character utilizes one byte (i.e. positive int is "99999" while negative int is "-99999"). Note that int values may contain leading zeros (e.g. "00023" = "23").
Examples:
723 in field 21 would be mapped int as |21=723|.
-723 in field 12 would be mapped int as |12=-723|
The following data types are based on int.
</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.3">
		<Name>Length</Name>
		<BaseType>int</BaseType>
		<Description>int field representing the length in bytes. Value must be positive.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:nonNegativeInteger</Base>
			<Description>int field representing the length in bytes. Value must be positive.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.3">
		<Name>TagNum</Name>
		<BaseType>int</BaseType>
		<Description>int field representing a field's tag number when using FIX "Tag=Value" syntax. Value must be positive and may not contain leading zeros.</Description>
	</Datatype>
	<Datatype added="FIX.4.3">
		<Name>SeqNum</Name>
		<BaseType>int</BaseType>
		<Description>int field representing a message sequence number. Value must be positive.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:positiveInteger</Base>
			<Description>int field representing a message sequence number. Value must be positive.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.3">
		<Name>NumInGroup</Name>
		<BaseType>int</BaseType>
		<Description>int field representing the number of entries in a repeating group. Value must be positive.</Description>
	</Datatype>
	<Datatype added="FIX.4.1">
		<Name>DayOfMonth</Name>
		<BaseType>int</BaseType>
		<Description>int field representing a day during a particular monthy (values 1 to 31).</Description>
	</Datatype>
	<Datatype added="FIX.2.7">
		<Name>float</Name>
		<Description>Sequence of digits with optional decimal point and sign character (ASCII characters "-", "0" - "9" and "."); the absence of the decimal point within the string will be interpreted as the float representation of an integer value. All float fields must accommodate up to fifteen significant digits. The number of decimal places used should be a factor of business/market needs and mutual agreement between counterparties. Note that float values may contain leading zeros (e.g. "00023.23" = "23.23") and may contain or omit trailing zeros after the decimal point (e.g. "23.0" = "23.0000" = "23" = "23.").
Note that fields which are derived from float may contain negative values unless explicitly specified otherwise. The following data types are based on float.</Description>
		<XML>
			<BuiltIn>1</BuiltIn>
			<Base>xs:decimal</Base>
			<Description>Sequence of digits with optional decimal point and sign character (ASCII characters "-", "0" - "9" and "."); the absence of the decimal point within the string will be interpreted as the float representation of an integer value. All float fields must accommodate up to fifteen significant digits. The number of decimal places used should be a factor of business/market needs and mutual agreement between counterparties. Note that float values may contain leading zeros (e.g. "00023.23" = "23.23") and may contain or omit trailing zeros after the decimal point (e.g. "23.0" = "23.0000" = "23" = "23.").
Note that fields which are derived from float may contain negative values unless explicitly specified otherwise. The following data types are based on float.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>Qty</Name>
		<BaseType>float</BaseType>
		<Description>float field capable of storing either a whole number (no decimal places) of "shares" (securities denominated in whole units) or a decimal value containing decimal places for non-share quantity asset classes (securities denominated in fractional units).</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:decimal</Base>
			<Description>float field capable of storing either a whole number (no decimal places) of "shares" (securities denominated in whole units) or a decimal value containing decimal places for non-share quantity asset classes (securities denominated in fractional units).</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>Price</Name>
		<BaseType>float</BaseType>
		<Description>float field representing a price. Note the number of decimal places may vary. For certain asset classes prices may be negative values. For example, prices for options strategies can be negative under certain market conditions. Refer to Volume 7: FIX Usage by Product for asset classes that support negative price values.</Description>
		<Example>Strk="47.50"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:decimal</Base>
			<Description>float field representing a price. Note the number of decimal places may vary. For certain asset classes prices may be negative values. For example, prices for options strategies can be negative under certain market conditions. Refer to Volume 7: FIX Usage by Product for asset classes that support negative price values.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>PriceOffset</Name>
		<BaseType>float</BaseType>
		<Description>float field representing a price offset, which can be mathematically added to a "Price". Note the number of decimal places may vary and some fields such as LastForwardPoints may be negative.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:decimal</Base>
			<Description>float field representing a price offset, which can be mathematically added to a "Price". Note the number of decimal places may vary and some fields such as LastForwardPoints may be negative.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>Amt</Name>
		<BaseType>float</BaseType>
		<Description>float field typically representing a Price times a Qty</Description>
		<Example>Amt="6847.00"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:decimal</Base>
			<Description>float field typically representing a Price times a Qty</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.3">
		<Name>Percentage</Name>
		<BaseType>float</BaseType>
		<Description>float field representing a percentage (e.g. 0.05 represents 5% and 0.9525 represents 95.25%). Note the number of decimal places may vary.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:decimal</Base>
			<Description>float field representing a percentage (e.g. 0.05 represents 5% and 0.9525 represents 95.25%). Note the number of decimal places may vary.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.2.7">
		<Name>char</Name>
		<Description>Single character value, can include any alphanumeric character or punctuation except the delimiter. All char fields are case sensitive (i.e. m != M).
The following fields are based on char.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>.{1}</Pattern>
			<Description>Single character value, can include any alphanumeric character or punctuation except the delimiter. All char fields are case sensitive (i.e. m != M).
The following fields are based on char.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>Boolean</Name>
		<BaseType>char</BaseType>
		<Description>char field containing one of two values:
'Y' = True/Yes
'N' = False/No</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>[YN]{1}</Pattern>
			<Description>char field containing one of two values:
'Y' = True/Yes
'N' = False/No</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>String</Name>
		<Description>Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).</Description>
		<XML>
			<BuiltIn>1</BuiltIn>
			<Base>xs:string</Base>
			<Description>Alpha-numeric free format strings, can include any character or punctuation except the delimiter. All String fields are case sensitive (i.e. morstatt != Morstatt).</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4">
		<Name>MultipleCharValue</Name>
		<BaseType>String</BaseType>
		<Description>string field containing one or more space delimited single character values (e.g. |18=2 A F| ).</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>[A-Za-z0-9](\s[A-Za-z0-9])*</Pattern>
			<Description>string field containing one or more space delimited single character values (e.g. |18=2 A F| ).</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>MultipleStringValue</Name>
		<BaseType>String</BaseType>
		<Description>string field containing one or more space delimited multiple character values (e.g. |277=AV AN A| ).</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>.+(\s.+)*</Pattern>
			<Description>string field containing one or more space delimited multiple character values (e.g. |277=AV AN A| ).</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4">
		<Name>Country</Name>
		<BaseType>String</BaseType>
		<Description>string field representing a country using ISO 3166 Country code (2 character) values (see Appendix 6-B).</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>.{2}</Pattern>
			<Description>string field representing a country using ISO 3166 Country code (2 character) values (see Appendix 6-B).</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>Currency</Name>
		<BaseType>String</BaseType>
		<Description>string field representing a currency type using ISO 4217 Currency code (3 character) values (see Appendix 6-A).</Description>
		<Example>StrkCcy="USD"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>.{3}</Pattern>
			<Description>string field representing a currency type using ISO 4217 Currency code (3 character) values (see Appendix 6-A).</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>Exchange</Name>
		<BaseType>String</BaseType>
		<Description>string field representing a market or exchange using ISO 10383 Market Identifier Code (MIC) values (see"Appendix 6-C).</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>.*</Pattern>
			<Description>string field representing a market or exchange using ISO 10383 Market Identifier Code (MIC) values (see"Appendix 6-C).</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.1">
		<Name>MonthYear</Name>
		<BaseType>String</BaseType>
		<Description>string field representing month of a year. An optional day of the month can be appended or an optional week code.
Valid formats:
YYYYMM
YYYYMMDD
YYYYMMWW
Valid values:
YYYY = 0000-9999; MM = 01-12; DD = 01-31; WW = w1, w2, w3, w4, w5.</Description>
		<Example>MonthYear="200303",  MonthYear="20030320", MonthYear="200303w2"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>\d{4}(0|1)\d([0-3wW]\d)?</Pattern>
			<Description>string field representing month of a year. An optional day of the month can be appended or an optional week code.
Valid formats:
YYYYMM
YYYYMMDD
YYYYMMWW
Valid values:
YYYY = 0000-9999; MM = 01-12; DD = 01-31; WW = w1, w2, w3, w4, w5.</Description>
			<Example>MonthYear="200303",  MonthYear="20030320", MonthYear="200303w2"</Example>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>UTCTimestamp</Name>
		<BaseType>String</BaseType>
		<Description>string field representing Time/date combination represented in UTC (Universal Time Coordinated, also known as "GMT") in either YYYYMMDD-HH:MM:SS (whole seconds) or YYYYMMDD-HH:MM:SS.sss (milliseconds) format, colons, dash, and period required.
Valid values:
* YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second) (without milliseconds).
* YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).
Leap Seconds: Note that UTC includes corrections for leap seconds, which are inserted to account for slowing of the rotation of the earth. Leap second insertion is declared by the International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of Dec. 31 or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second insertion, but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may read "19981231-23:59:59", "19981231-23:59:60", "19990101-00:00:00". (see http://tycho.usno.navy.mil/leapsec.html)</Description>
		<Example>TransactTm="20011217-09:30:47"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:dateTime</Base>
			<Description>string field representing Time/date combination represented in UTC (Universal Time Coordinated, also known as "GMT") in either YYYY-MM-DDTHH:MM:SS (whole seconds) or YYYY-MM-DDTHH:MM:SS.sss (milliseconds) format as specified in ISO 8601.
Valid values:
* YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second) (without milliseconds).
* YYYY = 0000-9999, MM = 01-12, DD = 01-31, HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).
Leap Seconds: Note that UTC includes corrections for leap seconds, which are inserted to account for slowing of the rotation of the earth. Leap second insertion is declared by the International Earth Rotation Service (IERS) and has, since 1972, only occurred on the night of Dec. 31 or Jun 30. The IERS considers March 31 and September 30 as secondary dates for leap second insertion, but has never utilized these dates. During a leap second insertion, a UTCTimestamp field may read "1998-12-31T23:59:59", "1998-12-31T23:59:60", "1999-01-01T00:00:00". (see http://tycho.usno.navy.mil/leapsec.html)</Description>
			<Example>TransactTm="2001-12-17T09:30:47-05:00"</Example>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>UTCTimeOnly</Name>
		<BaseType>String</BaseType>
		<Description>string field representing Time-only represented in UTC (Universal Time Coordinated, also known as "GMT") in either HH:MM:SS (whole seconds) or HH:MM:SS.sss (milliseconds) format, colons, and period required. This special-purpose field is paired with UTCDateOnly to form a proper UTCTimestamp for bandwidth-sensitive messages.
Valid values:
HH = 00-23, MM = 00-60 (60 only if UTC leap second), SS = 00-59. (without milliseconds)
HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).</Description>
		<Example>MDEntryTime="13:20:00.000"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:time</Base>
			<Description>string field representing Time-only represented in UTC (Universal Time Coordinated, also known as "GMT") in either HH:MM:SS (whole seconds) or HH:MM:SS.sss (milliseconds) format as specified in ISO 8601. This special-purpose field is paired with UTCDateOnly to form a proper UTCTimestamp for bandwidth-sensitive messages.
Valid values:
HH = 00-23, MM = 00-60 (60 only if UTC leap second), SS = 00-59. (without milliseconds)
HH = 00-23, MM = 00-59, SS = 00-60 (60 only if UTC leap second), sss=000-999 (indicating milliseconds).</Description>
			<Example>MDEntryTime="13:20:00.000"</Example>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4">
		<Name>UTCDateOnly</Name>
		<BaseType>String</BaseType>
		<Description>string field representing Date represented in UTC (Universal Time Coordinated, also known as "GMT") in YYYYMMDD format. This special-purpose field is paired with UTCTimeOnly to form a proper UTCTimestamp for bandwidth-sensitive messages.
Valid values:
YYYY = 0000-9999, MM = 01-12, DD = 01-31.</Description>
		<Example>MDEntryDate="20030910"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:date</Base>
			<Description>string field representing Date represented in UTC (Universal Time Coordinated, also known as "GMT") in YYYY-MM-DD format specifed in ISO 8601. This special-purpose field is paired with UTCTimeOnly to form a proper UTCTimestamp for bandwidth-sensitive messages.
Valid values:
YYYY = 0000-9999, MM = 01-12, DD = 01-31.</Description>
			<Example>MDEntryDate="2003-09-10"</Example>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.2">
		<Name>LocalMktDate</Name>
		<BaseType>String</BaseType>
		<Description>string field represening a Date of Local Market (as oppose to UTC) in YYYYMMDD format. This is the "normal" date field used by the FIX Protocol.
Valid values:
YYYY = 0000-9999, MM = 01-12, DD = 01-31.</Description>
		<Example>BizDate="2003-09-10"</Example>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:date</Base>
			<Description>string field represening a Date of Local Market (as oppose to UTC) in YYYY-MM-DD format per the ISO 8601 standard. This is the "normal" date field used by the FIX Protocol.
Valid values:
YYYY = 0000-9999, MM = 01-12, DD = 01-31.</Description>
			<Example>BizDate="2003-09-10"</Example>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4" addedEP="-1">
		<Name>TZTimeOnly</Name>
		<BaseType>String</BaseType>
		<Description>string field representing the time represented based on ISO 8601. This is the time with a UTC offset to allow identification of local time and timezone of that time.
Format is HH:MM[:SS][Z | [ + | - hh[:mm]]] where HH = 00-23 hours, MM = 00-59 minutes, SS = 00-59 seconds, hh = 01-12 offset hours, mm = 00-59 offset minutes.
Example: 07:39Z is 07:39 UTC
Example: 02:39-05 is five hours behind UTC, thus Eastern Time
Example: 15:39+08 is eight hours ahead of UTC, Hong Kong/Singapore time
Example: 13:09+05:30 is 5.5 hours ahead of UTC, India time</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:time</Base>
			<Description>string field representing the time represented based on ISO 8601. This is the time with a UTC offset to allow identification of local time and timezone of that time.
Format is HH:MM[:SS][Z | [ + | - hh[:mm]]] where HH = 00-23 hours, MM = 00-59 minutes, SS = 00-59 seconds, hh = 01-12 offset hours, mm = 00-59 offset minutes.</Description>
<Example>MatTm="07:39Z" is 07:39 UTC</Example>
<Example>MatTm="02:39-05" is five hours behind UTC, thus Eastern Time</Example>
<Example>MatTm="15:39+08" is eight hours ahead of UTC, Hong Kong/Singapore time</Example>
<Example>MatTm="13:09+05:30" is 5.5 hours ahead of UTC, India time</Example>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4" addedEP="-1">
		<Name>TZTimestamp</Name>
		<BaseType>String</BaseType>
		<Description>string field representing a time/date combination representing local time with an offset to UTC to allow identification of local time and timezone offset of that time. The representation is based on ISO 8601.
Format is YYYYMMDD-HH:MM:SS[Z | [ + | - hh[:mm]]] where YYYY = 0000 to 9999, MM = 01-12, DD = 01-31 HH = 00-23 hours, MM = 00-59 minutes, SS = 00-59 seconds, hh = 01-12 offset hours, mm = 00-59 offset minutes
Example: 20060901-07:39Z is 07:39 UTC on 1st of September 2006
Example: 20060901-02:39-05 is five hours behind UTC, thus Eastern Time on 1st of September 2006
Example: 20060901-15:39+08 is eight hours ahead of UTC, Hong Kong/Singapore time on 1st of September 2006
Example: 20060901-13:09+05:30 is 5.5 hours ahead of UTC, India time on 1st of September 2006</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:dateTime</Base>
			<Description>string field representing a time/date combination representing local time with an offset to UTC to allow identification of local time and timezone offset of that time. The representation is based on ISO 8601.
Format is YYYYMMDD-HH:MM:SS[Z | [ + | - hh[:mm]]] where YYYY = 0000 to 9999, MM = 01-12, DD = 01-31 HH = 00-23 hours, MM = 00-59 minutes, SS = 00-59 seconds, hh = 01-12 offset hours, mm = 00-59 offset minutes.</Description>
<Example>TZTransactTime="2006-09-01T07:39Z" is 07:39 UTC on 1st of September 2006</Example>
<Example>TZTransactTime="2006-09-01T02:39-05" is five hours behind UTC, thus Eastern Time on 1st of September 2006</Example>
<Example>TZTransactTime="2006-09-01T15:39+08" is eight hours ahead of UTC, Hong Kong/Singapore time on 1st of September 2006</Example>
<Example>TZTransactTime="2006-09-01T13:09+05:30" is 5.5 hours ahead of UTC, India time on 1st of September 2006</Example>
		</XML>
	</Datatype>
	<Datatype added="FIX.2.7">
		<Name>data</Name>
		<BaseType>String</BaseType>
		<Description>string field containing raw data with no format or content restrictions. Data fields are always immediately preceded by a length field. The length field should specify the number of bytes of the value of the data field (up to but not including the terminating SOH).
Caution: the value of one of these fields may contain the delimiter (SOH) character. Note that the value specified for this field should be followed by the delimiter (SOH) character as all fields are terminated with an "SOH".</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Description>string field containing raw data with no format or content restrictions. Data fields are always immediately preceded by a length field. The length field should specify the number of bytes of the value of the data field (up to but not including the terminating SOH).
Caution: the value of one of these fields may contain the delimiter (SOH) character. Note that the value specified for this field should be followed by the delimiter (SOH) character as all fields are terminated with an "SOH".</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4" addedEP="-1">
		<Name>Pattern</Name>
		<Description>Used to build on and provide some restrictions on what is allowed as valid values in fields that uses a base FIX data type and a pattern data type. The universe of allowable valid values for the field would then be the union of the base set of valid values and what is defined by the pattern data type. The pattern data type used by the field will retain its base FIX data type (e.g. String, int, char).</Description>
	</Datatype>
	<Datatype added="FIX.4.4" addedEP="-1">
		<Name>Tenor</Name>
		<BaseType>Pattern</BaseType>
		<Description>used to allow the expression of FX standard tenors in addition to the base valid enumerations defined for the field that uses this pattern data type. This pattern data type is defined as follows:
Dx = tenor expression for "days", e.g. "D5", where "x" is any integer &gt; 0
Mx = tenor expression for "months", e.g. "M3", where "x" is any integer &gt; 0
Wx = tenor expression for "weeks", e.g. "W13", where "x" is any integer &gt; 0
Yx = tenor expression for "years", e.g. "Y1", where "x" is any integer &gt; 0</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
			<Pattern>[DMWY](\d)+</Pattern>
			<Description>used to allow the expression of FX standard tenors in addition to the base valid enumerations defined for the field that uses this pattern data type. This pattern data type is defined as follows:
Dx = tenor expression for "days", e.g. "D5", where "x" is any integer &gt; 0
Mx = tenor expression for "months", e.g. "M3", where "x" is any integer &gt; 0
Wx = tenor expression for "weeks", e.g. "W13", where "x" is any integer &gt; 0
Yx = tenor expression for "years", e.g. "Y1", where "x" is any integer &gt; 0</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4" addedEP="-1">
		<Name>Reserved100Plus</Name>
		<BaseType>Pattern</BaseType>
		<Description>Values "100" and above are reserved for bilaterally agreed upon user defined enumerations.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:integer</Base>
			<MinInclusive>100</MinInclusive>
			<Description>Values "100" and above are reserved for bilaterally agreed upon user defined enumerations.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4" addedEP="-1">
		<Name>Reserved1000Plus</Name>
		<BaseType>Pattern</BaseType>
		<Description>Values "1000" and above are reserved for bilaterally agreed upon user defined enumerations.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:integer</Base>
			<MinInclusive>1000</MinInclusive>
			<Description>Values "1000" and above are reserved for bilaterally agreed upon user defined enumerations.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.4.4" addedEP="-1">
		<Name>Reserved4000Plus</Name>
		<BaseType>Pattern</BaseType>
		<Description>Values "4000" and above are reserved for bilaterally agreed upon user defined enumerations.</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:integer</Base>
			<MinInclusive>4000</MinInclusive>
			<Description>Values "4000" and above are reserved for bilaterally agreed upon user defined enumerations.</Description>
		</XML>
	</Datatype>
	<Datatype added="FIX.5.0" addedEP="-1">
		<Name>XMLData</Name>
		<BaseType>String</BaseType>
		<Description>Contains an XML document raw data with no format or content restrictions. XMLData fields are always immediately preceded by a length field. The length field should specify the number of bytes of the value of the data field (up to but not including the terminating SOH).</Description>
		<XML>
			<BuiltIn>0</BuiltIn>
			<Base>xs:string</Base>
		</XML>
	</Datatype>
</Datatypes>